@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 270 50% 7%;
    --foreground: 270 10% 90%;

    --card: 270 50% 10%;
    --card-foreground: 270 10% 90%;

    --popover: 270 50% 10%;
    --popover-foreground: 270 10% 90%;

    --primary: 260 100% 60%;
    --primary-foreground: 260 10% 98%;

    --secondary: 300 100% 50%;
    --secondary-foreground: 300 10% 98%;

    --muted: 270 30% 20%;
    --muted-foreground: 270 10% 70%;

    --accent: 330 100% 50%;
    --accent-foreground: 330 10% 98%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 0 10% 98%;

    --border: 270 30% 20%;
    --input: 270 30% 20%;
    --ring: 270 100% 50%;

    --radius: 0.5rem;
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground overflow-x-hidden;
    font-feature-settings: "ss01", "ss02", "cv01", "cv02", "cv03";
    image-rendering: pixelated;
  }

  ::selection {
    @apply bg-neon-purple/30 text-white;
  }
}

@layer components {
  .glitch-container {
    position: relative;
    display: inline-block;
    overflow: hidden;
  }

  .glitch-container::before,
  .glitch-container::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .glitch-container::before {
    left: 2px;
    text-shadow: -1px 0 #00ffff;
    animation: glitch-anim-1 2s infinite linear alternate-reverse;
  }

  .glitch-container::after {
    left: -2px;
    text-shadow: 1px 0 #ff00ff;
    animation: glitch-anim-2 3s infinite linear alternate-reverse;
  }

  .neo-brutal {
    @apply border-4 border-black shadow-[8px_8px_0px_0px_rgba(0,0,0,1)];
  }

  .glassmorphism {
    @apply bg-white/10 backdrop-blur-md border border-white/20 rounded-lg;
  }

  .pixel-border {
    box-shadow:
      0 0 0 2px #000,
      0 0 0 4px #fff,
      0 0 0 6px #000;
  }

  .tetris-block {
    @apply neo-brutal relative animate-tetris-fall;
    transition: transform 0.3s cubic-bezier(0.65, 0, 0.35, 1);
    image-rendering: pixelated;
  }

  .tetris-block:hover {
    transform: translateY(-10px) rotate(2deg);
  }

  .tetris-grid {
    position: relative;
    perspective: 1000px;
  }

  .pixel-texture {
    position: relative;
    z-index: 1;
  }
  
  .pixel-texture::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url("data:image/svg+xml,%3Csvg width='8' height='8' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0h4v4H0V0zm4 4h4v4H4V4z' fill='rgba(255,255,255,0.05)'/%3E%3C/svg%3E");
    background-size: 8px 8px;
    pointer-events: none;
    z-index: -1;
  }

  .pixel-texture::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%),
                linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%);
    background-size: 12px 12px;
    background-position: 0 0, 6px 6px;
    z-index: -1;
    opacity: 0.2;
    pointer-events: none;
  }
  
  .broken-animation {
    animation-timing-function: steps(5, end);
    animation-duration: calc(1s + (100% - var(--scroll-percentage, 0)) * 0.05s);
  }

  .neon-text {
    @apply font-bold animate-neon-pulse;
    text-shadow: 0 0 10px currentColor, 0 0 20px currentColor, 0 0 30px currentColor;
  }

  .neon-border {
    @apply relative z-10;
  }

  .neon-border::before {
    content: '';
    position: absolute;
    top: -3px;
    left: -3px;
    right: -3px;
    bottom: -3px;
    z-index: -1;
    @apply rounded-lg animate-neon-pulse;
    box-shadow: 0 0 10px currentColor, 0 0 20px currentColor;
  }
}

@keyframes glitch-anim-1 {
  0%, 100% { clip-path: inset(50% 0 30% 0); }
  20% { clip-path: inset(33% 0 33% 0); }
  40% { clip-path: inset(10% 0 60% 0); }
  60% { clip-path: inset(70% 0 10% 0); }
  80% { clip-path: inset(40% 0 43% 0); }
}

@keyframes glitch-anim-2 {
  0%, 100% { clip-path: inset(70% 0 10% 0); } 
  20% { clip-path: inset(10% 0 60% 0); }
  40% { clip-path: inset(33% 0 33% 0); }
  60% { clip-path: inset(40% 0 43% 0); }
  80% { clip-path: inset(50% 0 30% 0); }
}

@keyframes pixelate {
  0% { filter: contrast(1) brightness(1); }
  25% { filter: contrast(1.1) brightness(0.9); }
  50% { filter: contrast(0.9) brightness(1.1); }
  75% { filter: contrast(1.2) brightness(0.85); }
  100% { filter: contrast(1) brightness(1); }
}

@keyframes gridMove {
  0% { background-position: 0 0; }
  100% { background-position: 8px 8px; }
}
